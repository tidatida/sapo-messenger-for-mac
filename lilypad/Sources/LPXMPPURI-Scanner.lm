%{
//
//  LPXMPPURI-Scanner.lm
//  Lilypad
//
//	Copyright (C) 2006-2008 PT.COM,  All rights reserved.
//	Author: Joao Pavao <jpavao@co.sapo.pt>
//
//	For more information on licensing, read the README file.
//	Para mais informações sobre o licenciamento, leia o ficheiro README.
//

#import "LPXMPPURI-Scanner.h"


// Redefined prototype for yylex() so that we can have custom parameter and return types
#define YY_DECL int yylex( NSString **oJidPtr, NSString **oActionPtr, NSMutableDictionary *paramsDict )

#define SCANNER_SUCCESS		0
#define SCANNER_FAILURE		1


static NSString * NSStringFromURIChars(const char *text, unsigned int len)
{
	if (len > 0) {
		NSString *string = [[NSString alloc] initWithBytes:text length:len encoding:NSUTF8StringEncoding];
		NSString *unescapedString = (NSString *)CFURLCreateStringByReplacingPercentEscapes(kCFAllocatorDefault,
																						   (CFStringRef)string,
																						   CFSTR(""));
		[string release];
		return [unescapedString autorelease];
	}
	else {
		return nil;
	}
}


%}


%option noyywrap
%option nounput
%option prefix="xmppuri_scanner_yy"

%x beforeJid afterJid queryAction queryParams fragment


UNRESERVED			[-_.~[:alnum:]]
HEX					[a-fA-F0-9]
ESCAPE				"%"{HEX}{HEX}

QCHAR				{UNRESERVED}|{ESCAPE}
PCHAR				{UNRESERVED}|{ESCAPE}|[!$&'()*+,;=:@]

RESID				({UNRESERVED}|{ESCAPE}|[!"$&'()*+,:;<=>\[\\\]^`{|}])*
NODEID				({UNRESERVED}|{ESCAPE}|[!$()*+,;=\[\\\]^`{|}])*

TOPDOMAINLABEL		([[:alpha:]]|([[:alpha:]][-[:alnum:]]*[[:alnum:]]))
DOMAINLABEL			([[:alnum:]]|([[:alnum:]][-[:alnum:]]*[[:alnum:]]))
HOSTNAME			({DOMAINLABEL}".")*{TOPDOMAINLABEL}

IPDIGITS			[[:digit:]]{1,3}
HOSTNUMBER			({IPDIGITS}"."){3}{IPDIGITS}

HOST				{HOSTNAME}|{HOSTNUMBER}


%%


"xmpp://"{NODEID}"@"{HOST}$							return SCANNER_SUCCESS;
"xmpp://"{NODEID}"@"{HOST}"/"						BEGIN(beforeJid);
"xmpp:"												BEGIN(beforeJid);

<beforeJid>({NODEID}"@")?{HOST}("/"{RESID})?		*oJidPtr = NSStringFromURIChars(yytext, yyleng); BEGIN(afterJid);

<afterJid>"?"										BEGIN(queryAction);
<afterJid,queryAction,queryParams>"#"				BEGIN(fragment);

<queryAction>{QCHAR}*								*oActionPtr = NSStringFromURIChars(yytext, yyleng); BEGIN(queryParams);

<queryParams>";"{QCHAR}*"="{QCHAR}*					{
				NSString *pairStr = [[NSString alloc] initWithBytes:(yytext + 1) length:(yyleng - 1) encoding:NSUTF8StringEncoding];
				NSArray *pairComponents = [pairStr componentsSeparatedByString:@"="];
				
				NSString *paramKey = (NSString *)CFURLCreateStringByReplacingPercentEscapes(kCFAllocatorDefault,
																							(CFStringRef)[pairComponents objectAtIndex:0],
																							CFSTR(""));
				NSString *paramValue = (NSString *)CFURLCreateStringByReplacingPercentEscapes(kCFAllocatorDefault,
																							  (CFStringRef)[pairComponents objectAtIndex:1],
																							  CFSTR(""));
				
				[paramsDict setObject:paramValue forKey:paramKey];
				
				[paramKey release];
				[paramValue release];
				[pairStr release];
}


<fragment>({PCHAR}|"/"|"?")*						// Do nothing. We don't need the fragment.


<INITIAL,beforeJid><<EOF>>							return SCANNER_FAILURE;
<afterJid,queryAction,queryParams,fragment><<EOF>>	return SCANNER_SUCCESS;

<*>.|\n												return SCANNER_FAILURE;


%%


BOOL LPXMPPURI_ParseURI (NSString *uriStr, NSString **oJidPtr, NSString **oActionPtr, NSDictionary **oParamsPtr)
{
	YY_BUFFER_STATE		lex_buffer;
	NSData				*uriStrData = [uriStr dataUsingEncoding:NSISOLatin1StringEncoding allowLossyConversion:YES];
	
	NSString			*jid = nil, *action = nil;
	NSMutableDictionary	*params = [NSMutableDictionary dictionary];
	int					scannerResult;
	
	// Run the scanner
	lex_buffer = yy_scan_bytes([uriStrData bytes], [uriStrData length]);
	BEGIN(INITIAL);
	scannerResult = yylex(&jid, &action, params);
	yy_delete_buffer(lex_buffer);
	
	if (scannerResult == SCANNER_SUCCESS) {
		if (oJidPtr)							*oJidPtr = jid;
		if (oActionPtr)							*oActionPtr = action;
		if (oParamsPtr && [params count] > 0)	*oParamsPtr = params;
	}
	
	return (scannerResult == SCANNER_SUCCESS);
}
