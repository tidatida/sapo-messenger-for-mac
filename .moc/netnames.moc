/****************************************************************************
** Meta object code from reading C++ file 'netnames.cpp'
**
** Created: Thu Jul 20 17:52:33 2006
**      by: The Qt Meta Object Compiler version 59 (Qt 4.1.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'netnames.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 59
#error "This file was generated using the moc from 4.1.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

static const uint qt_meta_data_XMPP__ServiceResolver__Private[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       2,   10, // methods
       0,    0, // properties
       0,    0, // enums/sets

 // slots: signature, parameters, type, tag, flags
      40,   32,   31,   31, 0x08,
      82,   31,   31,   31, 0x08,

       0        // eod
};

static const char qt_meta_stringdata_XMPP__ServiceResolver__Private[] = {
    "XMPP::ServiceResolver::Private\0\0results\0"
    "dns_resultsReady(QList<XMPP::NameRecord>)\0"
    "dns_error(XMPP::NameResolver::Error)\0"
};

const QMetaObject XMPP::ServiceResolver::Private::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_XMPP__ServiceResolver__Private,
      qt_meta_data_XMPP__ServiceResolver__Private, 0 }
};

const QMetaObject *XMPP::ServiceResolver::Private::metaObject() const
{
    return &staticMetaObject;
}

void *XMPP::ServiceResolver::Private::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_XMPP__ServiceResolver__Private))
	return static_cast<void*>(const_cast<Private*>(this));
    return QObject::qt_metacast(_clname);
}

int XMPP::ServiceResolver::Private::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: dns_resultsReady(*reinterpret_cast< const QList<XMPP::NameRecord>(*)>(_a[1])); break;
        case 1: dns_error(*reinterpret_cast< XMPP::NameResolver::Error(*)>(_a[1])); break;
        }
        _id -= 2;
    }
    return _id;
}
static const uint qt_meta_data_XMPP__NameManager[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       9,   10, // methods
       0,    0, // properties
       0,    0, // enums/sets

 // slots: signature, parameters, type, tag, flags
      30,   19,   18,   18, 0x08,
      94,   89,   18,   18, 0x08,
     156,  148,   18,   18, 0x08,
     203,  198,   18,   18, 0x08,
     264,  198,   18,   18, 0x08,
     330,  327,   18,   18, 0x08,
     370,  357,   18,   18, 0x08,
     422,  327,   18,   18, 0x08,
     454,  327,   18,   18, 0x08,

       0        // eod
};

static const char qt_meta_stringdata_XMPP__NameManager[] = {
    "XMPP::NameManager\0\0id,results\0"
    "provider_resolve_resultsReady(int,QList<XMPP::NameRecord>)\0id,e\0"
    "provider_resolve_error(int,XMPP::NameResolver::Error)\0id,name\0"
    "provider_resolve_useLocal(int,QByteArray)\0id,i\0"
    "provider_browse_instanceAvailable(int,XMPP::ServiceInstance)\0"
    "provider_browse_instanceUnavailable(int,XMPP::ServiceInstance)\0id\0"
    "provider_browse_error(int)\0id,addr,port\0"
    "provider_resolve_resultsReady(int,QHostAddress,int)\0"
    "provider_publish_published(int)\0provider_publish_extra_published(int)\0"
};

const QMetaObject XMPP::NameManager::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_XMPP__NameManager,
      qt_meta_data_XMPP__NameManager, 0 }
};

const QMetaObject *XMPP::NameManager::metaObject() const
{
    return &staticMetaObject;
}

void *XMPP::NameManager::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_XMPP__NameManager))
	return static_cast<void*>(const_cast<NameManager*>(this));
    return QObject::qt_metacast(_clname);
}

int XMPP::NameManager::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: provider_resolve_resultsReady(*reinterpret_cast< int(*)>(_a[1]),*reinterpret_cast< const QList<XMPP::NameRecord>(*)>(_a[2])); break;
        case 1: provider_resolve_error(*reinterpret_cast< int(*)>(_a[1]),*reinterpret_cast< XMPP::NameResolver::Error(*)>(_a[2])); break;
        case 2: provider_resolve_useLocal(*reinterpret_cast< int(*)>(_a[1]),*reinterpret_cast< const QByteArray(*)>(_a[2])); break;
        case 3: provider_browse_instanceAvailable(*reinterpret_cast< int(*)>(_a[1]),*reinterpret_cast< const XMPP::ServiceInstance(*)>(_a[2])); break;
        case 4: provider_browse_instanceUnavailable(*reinterpret_cast< int(*)>(_a[1]),*reinterpret_cast< const XMPP::ServiceInstance(*)>(_a[2])); break;
        case 5: provider_browse_error(*reinterpret_cast< int(*)>(_a[1])); break;
        case 6: provider_resolve_resultsReady(*reinterpret_cast< int(*)>(_a[1]),*reinterpret_cast< const QHostAddress(*)>(_a[2]),*reinterpret_cast< int(*)>(_a[3])); break;
        case 7: provider_publish_published(*reinterpret_cast< int(*)>(_a[1])); break;
        case 8: provider_publish_extra_published(*reinterpret_cast< int(*)>(_a[1])); break;
        }
        _id -= 9;
    }
    return _id;
}
