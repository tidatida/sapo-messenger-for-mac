diff -ur a/include/bigint.h b/include/bigint.h
--- a/include/bigint.h	2004-10-10 12:33:54.000000000 -0700
+++ b/include/bigint.h	2004-10-28 23:58:45.000000000 -0700
@@ -6,7 +6,10 @@
 #ifndef BOTAN_BIGINT_H__
 #define BOTAN_BIGINT_H__
 
-#include <botan/base.h>
+#ifndef BOTAN_MINIMAL_BIGINT
+# include <botan/base.h>
+#endif
+#include <botan/secmem.h>
 #include <botan/mp_types.h>
 #include <iosfwd>
 
@@ -84,7 +87,9 @@
       word operator[](u32bit index) const { return reg[index]; }
       void clear() { reg.clear(); }
 
+#ifndef BOTAN_MINIMAL_BIGINT
       void randomize(u32bit = 0, RNG_Quality = SessionKey);
+#endif
 
       void binary_encode(byte[]) const;
       void binary_decode(const byte[], u32bit);
@@ -103,7 +108,9 @@
       BigInt(const std::string&);
       BigInt(const byte[], u32bit, Base = Binary);
       BigInt(Sign, u32bit);
+#ifndef BOTAN_MINIMAL_BIGINT
       BigInt(NumberType, u32bit);
+#endif
    private:
       friend void modifying_divide(BigInt&, BigInt&, BigInt&);
       void grow_to(u32bit n) const { reg.grow_to(n); }
@@ -142,15 +149,19 @@
 /*************************************************
 * I/O Operators                                  *
 *************************************************/
+#ifndef BOTAN_MINIMAL_BIGINT
 std::ostream& operator<<(std::ostream&, const BigInt&);
 std::istream& operator>>(std::istream&, BigInt&);
+#endif
 
 }
 
+#ifndef BOTAN_MINIMAL_BIGINT
 namespace std {
 
 inline void swap(Botan::BigInt& a, Botan::BigInt& b) { a.swap(b); }
 
 }
+#endif
 
 #endif
Only in b/include: mmap_mem.h
diff -ur a/include/mp_types.h b/include/mp_types.h
--- a/include/mp_types.h	2004-10-10 12:33:54.000000000 -0700
+++ b/include/mp_types.h	2004-10-17 14:17:36.000000000 -0700
@@ -6,7 +6,9 @@
 #ifndef BOTAN_MPI_TYPES_H__
 #define BOTAN_MPI_TYPES_H__
 
-#include <botan/config.h>
+#ifndef BOTAN_NO_CONF_H
+# include <botan/config.h>
+#endif
 #include <botan/types.h>
 
 namespace Botan {
Only in b/include: mux_qt.h
diff -ur a/include/numthry.h b/include/numthry.h
--- a/include/numthry.h	2004-10-10 12:33:54.000000000 -0700
+++ b/include/numthry.h	2004-10-17 14:17:36.000000000 -0700
@@ -7,7 +7,9 @@
 #define BOTAN_NUMBTHRY_H__
 
 #include <botan/bigint.h>
-#include <botan/reducer.h>
+#ifndef BOTAN_MINIMAL_BIGINT
+# include <botan/reducer.h>
+#endif
 
 namespace Botan {
 
@@ -35,18 +37,24 @@
 s32bit jacobi(const BigInt&, const BigInt&);
 BigInt power(const BigInt&, u32bit);
 
+#ifndef BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Modular Exponentiation                         *
 *************************************************/
 BigInt power_mod(const BigInt&, const BigInt&, ModularReducer*);
 BigInt power_mod(const BigInt&, const BigInt&, const BigInt&);
 
+#endif // BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Utility Functions                              *
 *************************************************/
 u32bit low_zero_bits(const BigInt&);
 u32bit power_of_2(const BigInt&);
 
+#ifndef BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Primality Testing                              *
 *************************************************/
@@ -98,6 +106,8 @@
       ModularReducer* reducer;
    };
 
+#endif // BOTAN_MINIMAL_BIGINT
+
 }
 
 #endif
diff -ur a/include/secmem.h b/include/secmem.h
--- a/include/secmem.h	2004-10-10 12:33:54.000000000 -0700
+++ b/include/secmem.h	2004-10-17 14:17:36.000000000 -0700
@@ -7,7 +7,9 @@
 #define BOTAN_SECURE_MEMORY_BUFFERS_H__
 
 #include <botan/allocate.h>
-#include <botan/config.h>
+#ifndef BOTAN_NO_CONF_H
+# include <botan/config.h>
+#endif
 #include <botan/mem_ops.h>
 #include <algorithm>
 
diff -ur a/include/types.h b/include/types.h
--- a/include/types.h	2004-10-10 12:33:54.000000000 -0700
+++ b/include/types.h	2004-10-17 14:17:36.000000000 -0700
@@ -6,8 +6,22 @@
 #ifndef BOTAN_TYPES_H__
 #define BOTAN_TYPES_H__
 
+#ifdef BOTAN_TYPES_QT
+#include<qglobal.h>
+#endif
+
 namespace Botan {
 
+#ifdef BOTAN_TYPES_QT
+
+typedef uchar byte;
+typedef ushort u16bit;
+typedef Q_UINT32 u32bit;
+typedef Q_INT32 s32bit;
+typedef Q_UINT64 u64bit;
+
+#else
+
 typedef unsigned char byte;
 typedef unsigned short u16bit;
 typedef unsigned int u32bit;
@@ -24,6 +38,8 @@
    typedef unsigned long long u64bit;
 #endif
 
+#endif // BOTAN_TYPES_QT
+
 }
 
 namespace Botan_types {
diff -ur a/include/util.h b/include/util.h
--- a/include/util.h	2004-10-10 12:33:54.000000000 -0700
+++ b/include/util.h	2004-10-17 14:17:36.000000000 -0700
@@ -6,11 +6,16 @@
 #ifndef BOTAN_UTIL_H__
 #define BOTAN_UTIL_H__
 
-#include <botan/secmem.h>
-#include <botan/enums.h>
 #include <cstring>
 #include <string>
-#include <vector>
+
+#ifdef BOTAN_TOOLS_ONLY
+# include <botan/types.h>
+#else
+# include <botan/secmem.h>
+# include <botan/enums.h>
+# include <vector>
+#endif
 
 namespace Botan {
 
@@ -48,6 +53,8 @@
                    ((u64bit)input6 <<  8) | input7);
    }
 
+#ifndef BOTAN_TOOLS_ONLY
+
 /*************************************************
 * XOR Functions                                  *
 *************************************************/
@@ -75,12 +82,16 @@
 u64bit system_time();
 u64bit system_clock();
 
+#endif // BOTAN_TOOLS_ONLY
+
 /*************************************************
 * Memory Locking Functions                       *
 *************************************************/
 void lock_mem(void*, u32bit);
 void unlock_mem(void*, u32bit);
 
+#ifndef BOTAN_TOOLS_ONLY
+
 /*************************************************
 * Parsing functions                              *
 *************************************************/
@@ -97,8 +108,10 @@
 u32bit low_bit(u64bit);
 u32bit significant_bytes(u64bit);
 u32bit hamming_weight(u64bit);
+#endif // BOTAN_TOOLS_ONLY
 u32bit round_up(u32bit, u32bit);
 u32bit round_down(u32bit, u32bit);
+#ifndef BOTAN_TOOLS_ONLY
 u64bit combine_timers(u32bit, u32bit, u32bit);
 
 /*************************************************
@@ -107,6 +120,8 @@
 u32bit entropy_estimate(const byte[], u32bit);
 u32bit dl_work_factor(u32bit);
 
+#endif // BOTAN_TOOLS_ONLY
+
 /*************************************************
 * String/Integer Conversions                     *
 *************************************************/
@@ -123,6 +138,8 @@
 byte char2digit(char);
 char digit2char(byte);
 
+#ifndef BOTAN_TOOLS_ONLY
+
 std::string local2iso(const std::string&);
 std::string iso2local(const std::string&);
 
@@ -135,6 +152,8 @@
 MemoryVector<byte> pkcs_hash_id(const std::string&);
 byte ieee1363_hash_id(const std::string&);
 
+#endif // BOTAN_TOOLS_ONLY
+
 }
 
 #endif
diff -ur a/src/allocate.cpp b/src/allocate.cpp
--- a/src/allocate.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/allocate.cpp	2004-10-17 14:17:19.000000000 -0700
@@ -7,7 +7,9 @@
 #include <botan/secalloc.h>
 #include <botan/defalloc.h>
 #include <botan/mutex.h>
-#include <botan/init.h>
+#ifndef BOTAN_NO_INIT_H
+# include <botan/init.h>
+#endif
 #include <map>
 
 namespace Botan {
diff -ur a/src/big_base.cpp b/src/big_base.cpp
--- a/src/big_base.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/big_base.cpp	2004-10-17 14:17:19.000000000 -0700
@@ -6,7 +6,10 @@
 #include <botan/bigint.h>
 #include <botan/numthry.h>
 #include <botan/mp_core.h>
-#include <botan/rng.h>
+#include <botan/util.h>
+#ifndef BOTAN_MINIMAL_BIGINT
+# include <botan/rng.h>
+#endif
 
 namespace Botan {
 
@@ -88,6 +91,8 @@
 /*************************************************
 * Construct a Random BigInt                      *
 *************************************************/
+#ifndef BOTAN_MINIMAL_BIGINT
+
 BigInt::BigInt(NumberType type, u32bit bits)
    {
    set_sign(Positive);
@@ -97,6 +102,8 @@
       set_bit(bits);
    }
 
+#endif // BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Swap this BigInt with another                  *
 *************************************************/
@@ -398,6 +405,8 @@
 /*************************************************
 * Randomize this number                          *
 *************************************************/
+#ifndef BOTAN_MINIMAL_BIGINT
+
 void BigInt::randomize(u32bit bitsize, RNG_Quality level)
    {
    set_sign(Positive);
@@ -415,6 +424,8 @@
       }
    }
 
+#endif // BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Encode this number into bytes                  *
 *************************************************/
@@ -443,6 +454,8 @@
       reg[length / WORD_BYTES] = (reg[length / WORD_BYTES] << 8) | buf[j];
    }
 
+#ifndef BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Generate a random integer                      *
 *************************************************/
@@ -482,4 +495,6 @@
    return p;
    }
 
+#endif // BOTAN_MINIMAL_BIGINT
+
 }
diff -ur a/src/big_code.cpp b/src/big_code.cpp
--- a/src/big_code.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/big_code.cpp	2004-10-29 00:02:38.000000000 -0700
@@ -5,7 +5,10 @@
 
 #include <botan/bigint.h>
 #include <botan/numthry.h>
-#include <botan/hex.h>
+#include <botan/util.h>
+#ifndef BOTAN_MINIMAL_BIGINT
+# include <botan/hex.h>
+#endif
 
 namespace Botan {
 
@@ -16,6 +19,7 @@
    {
    if(base == Binary)
       n.binary_encode(output);
+#ifndef BOTAN_MINIMAL_BIGINT
    else if(base == Hexadecimal)
       {
       SecureVector<byte> binary(n.encoded_size(Binary));
@@ -23,6 +27,7 @@
       for(u32bit j = 0; j != binary.size(); j++)
          Hex_Encoder::encode(binary[j], output + 2*j);
       }
+#endif
    else if(base == Octal)
       {
       BigInt copy = n;
@@ -44,7 +49,15 @@
          divide(copy, 10, copy, remainder);
          output[output_size - 1 - j] = digit2char(remainder.word_at(0));
          if(copy.is_zero())
+            {
+            if(j < output_size - 1)
+               {
+               int extra = output_size - 1 - j;
+               memmove(output, output + extra, output_size - extra);
+               memset(output + output_size - extra, 0, extra);
+               }
             break;
+            }
          }
       }
    else
@@ -97,6 +110,7 @@
    BigInt r;
    if(base == Binary)
       r.binary_decode(buf, length);
+#ifndef BOTAN_MINIMAL_BIGINT
    else if(base == Hexadecimal)
       {
       SecureVector<byte> hex;
@@ -117,6 +131,7 @@
          binary[j] = Hex_Decoder::decode(hex+2*j-offset);
       r.binary_decode(binary, binary.size());
       }
+#endif
    else if(base == Decimal || base == Octal)
       {
       const u32bit RADIX = ((base == Decimal) ? 10 : 8);
diff -ur a/src/big_io.cpp b/src/big_io.cpp
--- a/src/big_io.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/big_io.cpp	2004-10-17 14:17:19.000000000 -0700
@@ -8,6 +8,8 @@
 
 namespace Botan {
 
+#ifndef BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Write the BigInt into a stream                 *
 *************************************************/
@@ -49,4 +51,6 @@
    return stream;
    }
 
+#endif // BOTAN_MINIMAL_BIGINT
+
 }
diff -ur a/src/mp_fkmul.cpp b/src/mp_fkmul.cpp
--- a/src/mp_fkmul.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/mp_fkmul.cpp	2004-10-17 14:21:19.000000000 -0700
@@ -6,6 +6,7 @@
 #include <botan/mp_core.h>
 #include <botan/util.h>
 #include <botan/exceptn.h>
+#include <botan/mem_ops.h>
 
 namespace Botan {
 
diff -ur a/src/mutex.cpp b/src/mutex.cpp
--- a/src/mutex.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/mutex.cpp	2004-10-17 14:17:19.000000000 -0700
@@ -5,7 +5,10 @@
 
 #include <botan/mutex.h>
 #include <botan/exceptn.h>
-#include <botan/init.h>
+
+#ifndef BOTAN_NO_INIT_H
+# include <botan/init.h>
+#endif
 
 namespace Botan {
 
diff -ur a/src/numthry.cpp b/src/numthry.cpp
--- a/src/numthry.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/numthry.cpp	2004-10-17 14:17:19.000000000 -0700
@@ -4,7 +4,9 @@
 *************************************************/
 
 #include <botan/numthry.h>
-#include <botan/ui.h>
+#ifndef BOTAN_MINIMAL_BIGINT
+# include <botan/ui.h>
+#endif
 
 namespace Botan {
 
@@ -247,6 +249,8 @@
    return x;
    }
 
+#ifndef BOTAN_MINIMAL_BIGINT
+
 /*************************************************
 * Do simple tests of primality                   *
 *************************************************/
@@ -389,4 +393,6 @@
    reducer = get_reducer(n);
    }
 
+#endif // BOTAN_MINIMAL_BIGINT
+
 }
diff -ur a/src/secalloc.cpp b/src/secalloc.cpp
--- a/src/secalloc.cpp	2004-10-10 12:33:53.000000000 -0700
+++ b/src/secalloc.cpp	2004-10-29 00:10:38.000000000 -0700
@@ -4,7 +4,14 @@
 *************************************************/
 
 #include <botan/secalloc.h>
-#include <botan/conf.h>
+#ifndef BOTAN_NO_CONF_H
+# include <botan/conf.h>
+#else
+namespace Botan {
+int botan_memory_chunk = 65536;
+int botan_prealloc = 2;
+}
+#endif
 #include <botan/util.h>
 
 namespace Botan {
@@ -27,7 +34,13 @@
 * SecureAllocator Constructor                    *
 *************************************************/
 SecureAllocator::SecureAllocator() :
-   PREF_SIZE(Config::get_u32bit("base/memory_chunk")), ALIGN_TO(8)
+   PREF_SIZE(
+#ifndef BOTAN_NO_CONF_H
+	Config::get_u32bit("base/memory_chunk")
+#else
+	botan_memory_chunk
+#endif
+	), ALIGN_TO(8)
    {
    if(!PREF_SIZE)
       throw Internal_Error("The base/memory_chunk option is unset");
@@ -53,7 +66,11 @@
 *************************************************/
 void SecureAllocator::init()
    {
+#ifndef BOTAN_NO_CONF_H
    for(u32bit j = 0; j != 2; j++)
+#else
+   for(u32bit j = 0; j != (u32bit)botan_prealloc; j++)
+#endif
       {
       void* ptr = 0;
       try {
diff -ur a/src/util.cpp b/src/util.cpp
--- a/src/util.cpp	2004-10-10 12:33:54.000000000 -0700
+++ b/src/util.cpp	2004-10-17 14:17:19.000000000 -0700
@@ -9,6 +9,8 @@
 
 namespace Botan {
 
+#ifndef BOTAN_TOOLS_ONLY
+
 /*************************************************
 * XOR arrays together                            *
 *************************************************/
@@ -167,6 +169,8 @@
    return weight;
    }
 
+#endif // BOTAN_TOOLS_ONLY
+
 /*************************************************
 * Round up n to multiple of align_to             *
 *************************************************/
@@ -185,6 +189,8 @@
    return (n - (n % align_to));
    }
 
+#ifndef BOTAN_TOOLS_ONLY
+
 /*************************************************
 * Return the work required for solving DL        *
 *************************************************/
@@ -203,6 +209,8 @@
    return std::max(estimate, MIN_ESTIMATE);
    }
 
+#endif // BOTAN_TOOLS_ONLY
+
 /*************************************************
 * Convert an integer into a string               *
 *************************************************/
@@ -304,6 +312,8 @@
    throw Invalid_Argument("digit2char: Input is not a digit");
    }
 
+#ifndef BOTAN_TOOLS_ONLY
+
 /*************************************************
 * Estimate the entropy of the buffer             *
 *************************************************/
@@ -336,4 +346,6 @@
    return (estimate / 2);
    }
 
+#endif // BOTAN_TOOLS_ONLY
+
 }
